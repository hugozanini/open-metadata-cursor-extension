(()=>{"use strict";var e={104:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GeminiService=void 0,t.GeminiService=class{constructor(e){this.baseUrl="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent",this.apiKey=e}async analyzeTable(e){const t=`\nYou are a data engineering expert analyzing database tables. Provide a concise analysis of this table:\n\nTABLE INFORMATION:\n- Name: ${e.name}\n- Full Name: ${e.fullyQualifiedName}\n- Type: ${e.tableType||"Unknown"}\n- Database: ${e.database||"Unknown"}\n- Schema: ${e.schema||"Unknown"}\n- Description: ${e.description||"No description provided"}\n- Row Count: ${e.rowCount||"Unknown"}\n- Last Updated: ${e.updatedAt||"Unknown"}\n- Tags: ${e.tags?.join(", ")||"None"}\n\nCOLUMNS:\n${e.columns?e.columns.slice(0,10).map(e=>`- ${e.name} (${e.dataType||"unknown type"}): ${e.description||"no description"}`).join("\n"):"Column information not available"}\n\nPlease provide:\n📊 **Data Summary**: Brief overview (1-2 sentences)\n⚠️  **Potential Issues**: Any concerns about data quality, naming, or structure\n💡 **Recommendations**: Suggestions for improvement\n🔗 **Relationships**: Likely connections to other tables based on column names\n\nKeep your response concise and practical for data engineers.\n        `;try{const e=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:t}]}],generationConfig:{temperature:.7,topK:40,topP:.95,maxOutputTokens:1024}})});if(!e.ok){const t=await e.text();return console.error("Gemini API error:",e.status,t),`❌ AI analysis failed (${e.status}). Check your API key in settings.`}const a=await e.json();return a.candidates&&a.candidates[0]?.content?.parts?.[0]?.text?a.candidates[0].content.parts[0].text:(console.error("Unexpected Gemini response format:",a),"❌ AI analysis returned unexpected format")}catch(e){return console.error("Error calling Gemini API:",e),`❌ AI analysis failed: ${e instanceof Error?e.message:"Network error"}`}}async searchInsights(e,t,a,n){const r=n?`\nThe user asked: "${e}"\n\nI found ${t.length} tables by searching for: ${a.join(", ")}\n\nTables found: ${t.slice(0,5).map(e=>`${e.name} - ${e.description||"stores data"}`).join("; ")}\n\nRespond conversationally as if answering the user's question directly. Explain what customer information they have based on these tables.\n\nFormat:\nBased on your data catalog, you have [describe the types of customer information available]. The main tables are [explain key tables and what customer data they contain]. \n\nYou might also want to explore: [2 related searches]\n\nBe helpful and conversational - like a data assistant.\n        `:`\nYou're analyzing ${t.length} tables found for "${e}".\n\nTables: ${t.slice(0,5).map(e=>`${e.name} (${e.description||"no description"})`).join("; ")}\n\nWrite a natural explanation about what these tables contain and why they're relevant. Then suggest 2 related searches.\n\nFormat:\nThe key tables for ${e} include [explain what each does and why it's relevant]. These tables help with [business context]. \n\nYou might also want to explore: [related term 1], [related term 2]\n\nBe informative but concise - like Google's AI overview.\n        `;try{const s=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:r}]}],generationConfig:{temperature:.7,topK:30,topP:.95,maxOutputTokens:150}})});if(!s.ok)return console.error("Gemini API error for insights:",s.status),n?`I found ${t.length} tables related to ${a.join(" and ")}. Configure Gemini API key for AI insights.`:`Found ${t.length} tables matching "${e}". Configure Gemini API key for AI insights.`;const i=await s.json();return i.candidates&&i.candidates[0]?.content?.parts?.[0]?.text?i.candidates[0].content.parts[0].text:n?`I found ${t.length} tables related to ${a.join(" and ")}. AI insights unavailable.`:`Found ${t.length} tables matching "${e}". AI insights unavailable.`}catch(r){return console.error("Error getting search insights:",r),n?`I found ${t.length} tables related to ${a.join(" and ")}. Check your internet connection for AI insights.`:`Found ${t.length} tables matching "${e}". Check your internet connection for AI insights.`}}async validateApiKey(){try{return(await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:"Hello"}]}]})})).ok}catch(e){return console.error("Error validating Gemini API key:",e),!1}}}},144:function(e,t,a){var n=this&&this.__createBinding||(Object.create?function(e,t,a,n){void 0===n&&(n=a);var r=Object.getOwnPropertyDescriptor(t,a);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[a]}}),Object.defineProperty(e,n,r)}:function(e,t,a,n){void 0===n&&(n=a),e[n]=t[a]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&n(t,e,a);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.deactivate=t.activate=void 0;const i=s(a(398)),o=a(826);t.activate=function(e){console.log("OpenMetadata AI Explorer is now active!");const t=new o.OpenMetadataExplorerProvider(e.extensionUri);e.subscriptions.push(i.window.registerWebviewViewProvider("openmetadataExplorer",t)),e.subscriptions.push(i.commands.registerCommand("openmetadataExplorer.refresh",()=>{t.refresh()})),i.window.showInformationMessage("OpenMetadata AI Explorer is ready! 🚀")},t.deactivate=function(){console.log("OpenMetadata AI Explorer deactivated")}},224:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LineageService=void 0,t.LineageService=class{constructor(e,t){this.baseURL=e.replace(/\/$/,""),this.authToken=t}getAuthHeaders(){const e={"Content-Type":"application/json"};return this.authToken&&(e.Authorization=`Bearer ${this.authToken}`),e}async getLineageData(e,t,a){const{upstreamDepth:n=1,downstreamDepth:r=1,nodesPerLayer:s=50}=a||{};try{const a=new URLSearchParams({fqn:e,type:t,upstreamDepth:0===n?"0":(n-1).toString(),downstreamDepth:r.toString(),includeDeleted:"false",size:s.toString()}),i=await fetch(`${this.baseURL}/api/v1/lineage/getLineage?${a}`,{method:"GET",headers:this.getAuthHeaders()});if(!i.ok)throw new Error(`Failed to fetch lineage data: HTTP ${i.status}: ${i.statusText}`);return await i.json()}catch(e){throw console.error("Error fetching lineage data:",e),e}}async getSimpleLineage(e,t="table",a=2){try{const n=await this.getLineageData(e,t,{upstreamDepth:a,downstreamDepth:a}),r=Object.values(n.nodes).map(e=>e.entity),s=r.find(t=>t.fullyQualifiedName===e);if(!s)throw new Error(`Center node not found for FQN: ${e}`);return{nodes:r,edges:[...Object.values(n.upstreamEdges),...Object.values(n.downstreamEdges)],centerNode:s}}catch(e){throw console.error("Error getting simple lineage:",e),e}}async hasLineage(e,t="table"){try{const a=await this.getLineageData(e,t,{upstreamDepth:1,downstreamDepth:1}),n=Object.keys(a.upstreamEdges).length>0,r=Object.keys(a.downstreamEdges).length>0;return n||r}catch(e){return console.error("Error checking lineage availability:",e),!1}}}},398:e=>{e.exports=require("vscode")},618:function(e,t,a){var n=this&&this.__createBinding||(Object.create?function(e,t,a,n){void 0===n&&(n=a);var r=Object.getOwnPropertyDescriptor(t,a);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[a]}}),Object.defineProperty(e,n,r)}:function(e,t,a,n){void 0===n&&(n=a),e[n]=t[a]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&n(t,e,a);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.OpenMetadataService=void 0;const i=s(a(398));t.OpenMetadataService=class{constructor(){const e=i.workspace.getConfiguration("openmetadataExplorer");this.baseUrl=e.get("openmetadataUrl")||"http://localhost:8585",this.authToken=e.get("openmetadataAuthToken")}extractSearchTerms(e){const t=["what","where","when","how","why","which","who","do","does","did","can","could","would","should","i","have","get","find","show","me","my","the","a","an","is","are","was","were","about","for","with","in","on","information","data","table","tables"],a=["customer","customers","user","users","client","clients","order","orders","purchase","purchases","transaction","transactions","product","products","item","items","inventory","sale","sales","revenue","payment","payments","address","addresses","location","locations","profile","profiles","account","accounts","metric","metrics","analytics","report","reports"],n=e.toLowerCase().replace(/[^\w\s]/g," ").split(/\s+/).filter(e=>e.length>2),r=n.filter(e=>a.includes(e)||!t.includes(e));return r.length>0?r:n.filter(e=>!t.includes(e))}isNaturalLanguageQuery(e){const t=e.toLowerCase();return["what","where","when","how","why","which","who"].some(e=>t.startsWith(e))||["?","do i have","can i find","show me","tell me"].some(e=>t.includes(e))||e.includes("?")}async searchWithNaturalLanguage(e){try{console.log(`Searching OpenMetadata for: ${e}`);let t=await this.search(e);if(0===t.length&&this.isNaturalLanguageQuery(e)){const t=this.extractSearchTerms(e);if(console.log(`No results for original query. Trying extracted terms: ${t.join(", ")}`),t.length>0){const e=[],a=[];for(const n of t)try{const t=await this.search(n);t.length>0&&(a.push(n),t.forEach(t=>{e.find(e=>e.id===t.id)||e.push(t)}))}catch(e){console.warn(`Failed to search for term: ${n}`,e)}return console.log(`Found ${e.length} results using extracted terms: ${a.join(", ")}`),{results:e.slice(0,20),searchTermsUsed:a,wasNaturalLanguage:!0}}}return{results:t,searchTermsUsed:[e],wasNaturalLanguage:!1}}catch(e){throw console.error("Error searching OpenMetadata:",e),e}}getAuthHeaders(){const e={"Content-Type":"application/json"};return this.authToken&&(e.Authorization=`Bearer ${this.authToken}`),e}async search(e){try{console.log(`Searching OpenMetadata for: ${e}`);const t=`${this.baseUrl}/api/v1/search/query?q=${encodeURIComponent(e)}&index=table_search_index&size=20`,a=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!a.ok)return console.log("Search API failed, trying to get all tables..."),await this.getAllTablesFiltered(e);const n=await a.json();console.log("OpenMetadata search response:",n);const r=[];if(n.hits?.hits)for(const e of n.hits.hits){const t=e._source;r.push({id:t.id||e._id,name:t.name||t.displayName||"Unknown",fullyQualifiedName:t.fullyQualifiedName||t.name,description:t.description,tableType:t.tableType,columns:t.columns,rowCount:t.rowCount,database:t.database?.name,schema:t.databaseSchema?.name,updatedAt:t.updatedAt,tags:t.tags?.map(e=>e.tagFQN||e.name)||[]})}return console.log(`Found ${r.length} results`),r}catch(t){console.error("Error searching OpenMetadata:",t);try{return await this.getAllTablesFiltered(e)}catch(e){throw console.error("Fallback also failed:",e),new Error(`Failed to search OpenMetadata: ${t instanceof Error?t.message:"Unknown error"}`)}}}async getAllTablesFiltered(e){try{console.log("Fetching all tables as fallback...");const t=`${this.baseUrl}/api/v1/tables?limit=50`,a=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!a.ok)throw new Error(`HTTP ${a.status}: ${a.statusText}`);const n=await a.json();console.log("All tables response:",n);let r=n.data||[];if(e&&e.trim()){const t=e.toLowerCase();r=r.filter(e=>e.name?.toLowerCase().includes(t)||e.description?.toLowerCase().includes(t)||e.fullyQualifiedName?.toLowerCase().includes(t))}const s=r.map(e=>({id:e.id,name:e.name,fullyQualifiedName:e.fullyQualifiedName,description:e.description,tableType:e.tableType,columns:e.columns,rowCount:e.rowCount,database:e.database?.name,schema:e.databaseSchema?.name,updatedAt:e.updatedAt,tags:e.tags?.map(e=>e.tagFQN||e.name)||[]}));return console.log(`Filtered to ${s.length} tables`),s}catch(e){throw console.error("Error fetching all tables:",e),e}}async getTableDetails(e){try{const t=`${this.baseUrl}/api/v1/tables/${e}`,a=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!a.ok)throw new Error(`HTTP ${a.status}: ${a.statusText}`);const n=await a.json();return{id:n.id,name:n.name,fullyQualifiedName:n.fullyQualifiedName,description:n.description,tableType:n.tableType,columns:n.columns,rowCount:n.rowCount,database:n.database?.name,schema:n.databaseSchema?.name,updatedAt:n.updatedAt,tags:n.tags?.map(e=>e.tagFQN||e.name)||[]}}catch(t){return console.error(`Error fetching table ${e}:`,t),null}}async testConnection(){try{return(await fetch(`${this.baseUrl}/api/v1/system/version`,{method:"GET",headers:this.getAuthHeaders()})).ok}catch(e){return console.error("Connection test failed:",e),!1}}}},826:function(e,t,a){var n=this&&this.__createBinding||(Object.create?function(e,t,a,n){void 0===n&&(n=a);var r=Object.getOwnPropertyDescriptor(t,a);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[a]}}),Object.defineProperty(e,n,r)}:function(e,t,a,n){void 0===n&&(n=a),e[n]=t[a]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&n(t,e,a);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.OpenMetadataExplorerProvider=void 0;const i=s(a(398)),o=a(104),l=a(224),c=a(618);class d{constructor(e){this._extensionUri=e,this.openMetadataService=new c.OpenMetadataService,this.initializeGeminiService(),this.initializeLineageService()}initializeGeminiService(){const e=i.workspace.getConfiguration("openmetadataExplorer").get("geminiApiKey");e&&(this.geminiService=new o.GeminiService(e))}initializeLineageService(){const e=i.workspace.getConfiguration("openmetadataExplorer"),t=e.get("openmetadataUrl")||"http://localhost:8585",a=e.get("openmetadataAuthToken")||"";this.lineageService=new l.LineageService(t,a)}resolveWebviewView(e,t,a){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage(async e=>{switch(e.type){case"search":await this.handleSearch(e.query);break;case"getConfig":await this.sendConfig();break;case"getLineage":await this.handleGetLineage(e.tableFqn,e.entityType);break;case"error":i.window.showErrorMessage(e.message);break;case"info":i.window.showInformationMessage(e.message)}})}async handleSearch(e){if(this._view)try{this._view.webview.postMessage({type:"searchStarted",query:e});const t=await this.openMetadataService.searchWithNaturalLanguage(e);if(this._view.webview.postMessage({type:"searchResults",query:e,results:t.results,aiInsights:"",searchContext:{originalQuery:e,searchTermsUsed:t.searchTermsUsed,wasNaturalLanguage:t.wasNaturalLanguage}}),this.geminiService&&t.results.length>0)try{const a=await this.geminiService.searchInsights(e,t.results,t.searchTermsUsed,t.wasNaturalLanguage);this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:a})}catch(e){console.error("AI insights error:",e),this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:t.wasNaturalLanguage?`I found ${t.results.length} tables related to ${t.searchTermsUsed.join(" and ")}. AI analysis is currently unavailable.`:`Found ${t.results.length} tables. AI analysis is currently unavailable.`})}else this.geminiService||this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:t.wasNaturalLanguage?`I found ${t.results.length} tables related to ${t.searchTermsUsed.join(" and ")}. Configure Gemini API key in settings for AI analysis.`:`Found ${t.results.length} tables. Configure Gemini API key in settings for AI analysis.`})}catch(e){console.error("Search error:",e),this._view.webview.postMessage({type:"searchError",error:e instanceof Error?e.message:"Unknown error occurred"})}}async handleGetLineage(e,t="table"){if(this._view)try{const a=await this.lineageService.getSimpleLineage(e,t,2);this._view.webview.postMessage({type:"lineageData",tableFqn:e,lineageData:a})}catch(t){console.error("Lineage error:",t),this._view.webview.postMessage({type:"lineageError",tableFqn:e,error:t instanceof Error?t.message:"Failed to load lineage data"})}}async sendConfig(){if(!this._view)return;const e=i.workspace.getConfiguration("openmetadataExplorer");this._view.webview.postMessage({type:"config",config:{openmetadataUrl:e.get("openmetadataUrl"),hasGeminiKey:!!e.get("geminiApiKey"),hasAuthToken:!!e.get("openmetadataAuthToken")}})}refresh(){this._view&&(this._view.webview.html=this._getHtmlForWebview(this._view.webview))}_getHtmlForWebview(e){const t=e.asWebviewUri(i.Uri.joinPath(this._extensionUri,"dist","webview.js")),a=function(){let e="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let a=0;a<32;a++)e+=t.charAt(Math.floor(62*Math.random()));return e}();return`<!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; img-src ${e.cspSource} https:; script-src 'nonce-${a}';">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <title>OpenMetadata AI Explorer</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    font-size: var(--vscode-font-size);\n                    font-weight: var(--vscode-font-weight);\n                    color: var(--vscode-foreground);\n                    background-color: var(--vscode-editor-background);\n                    margin: 0;\n                    padding: 10px;\n                }\n                .loading {\n                    text-align: center;\n                    padding: 20px;\n                }\n            </style>\n        </head>\n        <body>\n            <div class="loading">\n                <h2>🔍 OpenMetadata AI Explorer</h2>\n                <p>Loading...</p>\n            </div>\n            <div id="root"></div>\n            <script nonce="${a}">\n                console.log('Webview script starting...');\n                console.log('Script URI: ${t}');\n                \n                // Show loading message\n                setTimeout(() => {\n                    const loading = document.querySelector('.loading');\n                    if (loading && !document.querySelector('.app')) {\n                        loading.innerHTML = '<h2>⚠️ Loading Failed</h2><p>Check the developer console for errors.</p>';\n                    }\n                }, 5000);\n            <\/script>\n            <script nonce="${a}" src="${t}"><\/script>\n        </body>\n        </html>`}}t.OpenMetadataExplorerProvider=d,d.viewType="openmetadataExplorer"}},t={},a=function a(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,a),s.exports}(144);module.exports=a})();
//# sourceMappingURL=extension.js.map