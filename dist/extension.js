(()=>{"use strict";var e={104:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GeminiService=void 0,t.GeminiService=class{constructor(e){this.baseUrl="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent",this.apiKey=e}async analyzeTable(e){const t=`\nYou are a data engineering expert analyzing database tables. Provide a concise analysis of this table:\n\nTABLE INFORMATION:\n- Name: ${e.name}\n- Full Name: ${e.fullyQualifiedName}\n- Type: ${e.tableType||"Unknown"}\n- Database: ${e.database||"Unknown"}\n- Schema: ${e.schema||"Unknown"}\n- Description: ${e.description||"No description provided"}\n- Row Count: ${e.rowCount||"Unknown"}\n- Last Updated: ${e.updatedAt||"Unknown"}\n- Tags: ${e.tags?.join(", ")||"None"}\n\nCOLUMNS:\n${e.columns?e.columns.slice(0,10).map(e=>`- ${e.name} (${e.dataType||"unknown type"}): ${e.description||"no description"}`).join("\n"):"Column information not available"}\n\nPlease provide:\n📊 **Data Summary**: Brief overview (1-2 sentences)\n⚠️  **Potential Issues**: Any concerns about data quality, naming, or structure\n💡 **Recommendations**: Suggestions for improvement\n🔗 **Relationships**: Likely connections to other tables based on column names\n\nKeep your response concise and practical for data engineers.\n        `;try{const e=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:t}]}],generationConfig:{temperature:.7,topK:40,topP:.95,maxOutputTokens:1024}})});if(!e.ok){const t=await e.text();return console.error("Gemini API error:",e.status,t),`❌ AI analysis failed (${e.status}). Check your API key in settings.`}const i=await e.json();return i.candidates&&i.candidates[0]?.content?.parts?.[0]?.text?i.candidates[0].content.parts[0].text:(console.error("Unexpected Gemini response format:",i),"❌ AI analysis returned unexpected format")}catch(e){return console.error("Error calling Gemini API:",e),`❌ AI analysis failed: ${e instanceof Error?e.message:"Network error"}`}}async searchInsights(e,t,i,o){const n=o?`\nThe user asked: "${e}"\n\nI found ${t.length} tables by searching for: ${i.join(", ")}\n\nTables found: ${t.slice(0,5).map(e=>`${e.name} - ${e.description||"stores data"}`).join("; ")}\n\nRespond conversationally as if answering the user's question directly. Explain what customer information they have based on these tables.\n\nFormat:\nBased on your data catalog, you have [describe the types of customer information available]. The main tables are [explain key tables and what customer data they contain]. \n\nYou might also want to explore: [2 related searches]\n\nBe helpful and conversational - like a data assistant.\n        `:`\nYou're analyzing ${t.length} tables found for "${e}".\n\nTables: ${t.slice(0,5).map(e=>`${e.name} (${e.description||"no description"})`).join("; ")}\n\nWrite a natural explanation about what these tables contain and why they're relevant. Then suggest 2 related searches.\n\nFormat:\nThe key tables for ${e} include [explain what each does and why it's relevant]. These tables help with [business context]. \n\nYou might also want to explore: [related term 1], [related term 2]\n\nBe informative but concise - like Google's AI overview.\n        `;try{const r=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:n}]}],generationConfig:{temperature:.7,topK:30,topP:.95,maxOutputTokens:150}})});if(!r.ok)return console.error("Gemini API error for insights:",r.status),o?`I found ${t.length} tables related to ${i.join(" and ")}. Configure Gemini API key for AI insights.`:`Found ${t.length} tables matching "${e}". Configure Gemini API key for AI insights.`;const s=await r.json();return s.candidates&&s.candidates[0]?.content?.parts?.[0]?.text?s.candidates[0].content.parts[0].text:o?`I found ${t.length} tables related to ${i.join(" and ")}. AI insights unavailable.`:`Found ${t.length} tables matching "${e}". AI insights unavailable.`}catch(n){return console.error("Error getting search insights:",n),o?`I found ${t.length} tables related to ${i.join(" and ")}. Check your internet connection for AI insights.`:`Found ${t.length} tables matching "${e}". Check your internet connection for AI insights.`}}async validateApiKey(){try{return(await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:"Hello"}]}]})})).ok}catch(e){return console.error("Error validating Gemini API key:",e),!1}}}},144:function(e,t,i){var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,o,n)}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.deactivate=t.activate=void 0;const s=r(i(398)),a=i(826);t.activate=function(e){console.log("🚀 OpenMetadata AI Explorer: Starting activation...");try{console.log("🔧 Creating webview provider...");const t=new a.OpenMetadataExplorerProvider(e.extensionUri,e);console.log("📝 Registering webview provider..."),e.subscriptions.push(s.window.registerWebviewViewProvider("openmetadataExplorer",t)),console.log("⚙️ Registering commands..."),e.subscriptions.push(s.commands.registerCommand("openmetadataExplorer.refresh",()=>{t.refresh()})),console.log("✅ OpenMetadata AI Explorer activated successfully!"),s.window.showInformationMessage("OpenMetadata AI Explorer is ready! 🚀")}catch(e){console.error("❌ Failed to activate OpenMetadata AI Explorer:",e),s.window.showErrorMessage(`Failed to activate OpenMetadata AI Explorer: ${e}`)}},t.deactivate=function(){console.log("OpenMetadata AI Explorer deactivated")}},160:function(e,t,i){var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,o,n)}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.MicrophoneWrapper=void 0;const s=r(i(317)),a=i(317),c=r(i(896)),l=r(i(857)),d=r(i(398));t.MicrophoneWrapper=class{constructor(e={}){if(this.microphone=null,this.ps=null,this.platform=l.platform(),this.EventEmitter=i(434),this.commandName=null,this.commandAvailable=!1,this.options=e,this.commandInfo=function(){const e=l.platform();let t=null,i=!1,o="",n="",r="";try{switch(e){case"darwin":t="rec",n="default",r='system_profiler SPAudioDataType | grep "Input Sources:"';try{(0,a.execSync)("which rec",{stdio:"ignore"}),i=!0}catch{o="Install SoX on macOS using: brew install sox"}break;case"win32":t="sox",n="default",r="sox -h";try{(0,a.execSync)("where sox",{stdio:"ignore"}),i=!0}catch{o="Install SoX for Windows from: https://sourceforge.net/projects/sox/"}break;default:t="arecord",n="plughw:1,0",r="arecord -L";try{(0,a.execSync)("which arecord",{stdio:"ignore"}),i=!0}catch{o="Install ALSA tools using: sudo apt-get install alsa-utils"}}}catch(e){console.error("Error detecting microphone command:",e)}return{commandName:t,commandAvailable:i,installInstructions:o,defaultDevice:n,deviceListCommand:r}}(),this.commandName=this.commandInfo.commandName,this.commandAvailable=this.commandInfo.commandAvailable,this.options.device||(this.options.device=this.getConfiguredDevice()||this.commandInfo.defaultDevice,console.log(`MicrophoneWrapper: Using device: ${this.options.device}`)),!this.commandAvailable){if(console.warn(`Microphone command '${this.commandName}' not found.`),console.warn(`Installation instructions: ${this.commandInfo.installInstructions}`),"darwin"===this.platform)try{if(c.existsSync("/usr/local/bin/sox")||c.existsSync("/opt/homebrew/bin/sox"))return console.log("MicrophoneWrapper: Found sox command, but rec command is missing"),void d.window.showWarningMessage('SoX is installed but the "rec" command is not available. Try running "brew link --force sox" in Terminal.',"Open Terminal").then(e=>{"Open Terminal"===e&&s.exec("open -a Terminal")})}catch(e){}this.showInstallationInstructions()}this.commandAvailable?(console.log("MicrophoneWrapper: Command available, creating custom microphone implementation"),this.microphone=this.createMicrophoneImplementation()):(console.log("MicrophoneWrapper: Command not available, creating dummy microphone"),this.microphone=this.createDummyMicrophone())}getConfiguredDevice(){const e=d.workspace.getConfiguration("openmetadataExplorer.microphone");switch(this.platform){case"darwin":return e.get("deviceMacOS");case"win32":return e.get("deviceWindows");default:return e.get("deviceLinux")}}async listAvailableDevices(){if(this.commandAvailable&&this.commandInfo.deviceListCommand)try{const e=d.window.createOutputChannel("OpenMetadata Microphone Devices");e.show(),e.appendLine(`Listing available microphone devices for ${this.platform}...`),e.appendLine("Command: "+this.commandInfo.deviceListCommand),e.appendLine("-------------------------------------------");const t=s.execSync(this.commandInfo.deviceListCommand,{encoding:"utf-8"});e.appendLine(t),e.appendLine("-------------------------------------------"),e.appendLine("To use a specific device, configure it in VS Code settings:"),e.appendLine(`openmetadataExplorer.microphone.device${this.platform.charAt(0).toUpperCase()+this.platform.slice(1)}`)}catch(e){d.window.showErrorMessage(`Failed to list microphone devices: ${e.message}`)}else d.window.showErrorMessage(`Cannot list devices: ${this.commandName} command not available.`)}createDummyMicrophone(){const e=this.EventEmitter;return new class extends e{constructor(){super()}startRecording(){return console.warn("DummyMicrophone: startRecording called but no microphone command available"),this.emit("error",new Error(`Microphone not available. ${this.commandInfo?.installInstructions||"Please install required audio tools."}`)),null}stopRecording(){console.warn("DummyMicrophone: stopRecording called but no microphone command available")}}}createMicrophoneImplementation(){const e=this,t=this.EventEmitter;return new class extends t{constructor(t){super(),this.ps=null,this.options={},this.options=t||e.options}startRecording(){if(null===this.ps){if(!e.commandName)throw new Error("No microphone command available");let t=[];switch(e.commandName){case"rec":t=["-q","-b",this.options.bitwidth||"16","-c",this.options.channels||"1","-r",this.options.rate||"16000","-e",this.options.encoding||"signed-integer","-t","wav","-"];break;case"sox":t=["-b",this.options.bitwidth||"16","--endian",this.options.endian||"little","-c",this.options.channels||"1","-r",this.options.rate||"16000","-e",this.options.encoding||"signed-integer","-t","waveaudio",this.options.device||e.commandInfo.defaultDevice,"-p"];break;case"arecord":{const i="unsigned-integer"===this.options.encoding?"U":"S",o="big"===this.options.endian?"BE":"LE",n=`${i}${this.options.bitwidth||"16"}_${o}`;t=["-c",this.options.channels||"1","-r",this.options.rate||"16000","-f",n,"-D",this.options.device||e.commandInfo.defaultDevice];break}default:throw new Error(`Unsupported command: ${e.commandName}`)}this.options.additionalParameters&&(t=t.concat(this.options.additionalParameters));try{if(console.log(`MicrophoneWrapper: Starting ${e.commandName} with device: ${this.options.device||e.commandInfo.defaultDevice}`),this.ps=s.spawn(e.commandName,t),!this.ps)throw new Error(`Failed to start ${e.commandName} process`);if(this.ps.on("error",e=>{console.error(`MicrophoneWrapper: Process error: ${e.message}`),this.emit("error",e)}),this.ps.stderr&&(this.ps.stderr.on("error",e=>{console.error(`MicrophoneWrapper: stderr error: ${e.message}`),this.emit("error",e)}),this.ps.stderr.on("data",e=>{const t=e.toString().trim();t&&(console.log(`MicrophoneWrapper: Process info: ${t}`),this.emit("info",e))})),this.ps.stdout)return this.options.useDataEmitter&&this.ps.stdout.on("data",e=>{this.emit("data",e)}),this.ps.stdout;throw new Error("No stdout available from microphone process")}catch(e){return console.error(`MicrophoneWrapper: Failed to start recording: ${e.message}`),this.emit("error",e),null}}}stopRecording(){this.ps&&(this.ps.kill(),this.ps=null)}}}showInstallationInstructions(){const e=`Microphone not available. ${this.commandInfo.installInstructions}`;"darwin"===this.platform?d.window.showWarningMessage(e,"Open Terminal","More Info").then(e=>{"Open Terminal"===e?s.exec("open -a Terminal"):"More Info"===e&&d.env.openExternal(d.Uri.parse("https://formulae.brew.sh/formula/sox"))}):"win32"===this.platform?d.window.showWarningMessage(e,"Download SoX").then(e=>{"Download SoX"===e&&d.env.openExternal(d.Uri.parse("https://sourceforge.net/projects/sox/"))}):d.window.showWarningMessage(e,"Open Terminal").then(e=>{"Open Terminal"===e&&s.exec("x-terminal-emulator || gnome-terminal || xterm")})}startRecording(){if(!this.microphone)throw new Error("Microphone not initialized");this.microphone.useDataEmitter=!0;const e=this.microphone.startRecording();return this.microphone.on("error",e=>{console.error("MicrophoneWrapper: Error from microphone implementation:",e)}),this.microphone.on("info",e=>{console.log("MicrophoneWrapper: Info from microphone implementation:",e.toString())}),e}stopRecording(){this.microphone&&this.microphone.stopRecording()}async testMicrophone(){if(!this.commandAvailable)throw new Error(`Microphone command '${this.commandName}' not available. ${this.commandInfo.installInstructions}`);return new Promise((e,t)=>{console.log("Testing microphone...");try{const i=this.startRecording();if(!i)throw new Error("Failed to start microphone");let o=!1;const n=setTimeout(()=>{this.stopRecording(),o||t(new Error("No audio data received within 3 seconds"))},3e3);i.on("data",t=>{o||(o=!0,console.log(`Microphone test: Received ${t.length} bytes of audio data`),clearTimeout(n),this.stopRecording(),e())}),i.on("error",e=>{clearTimeout(n),this.stopRecording(),t(e)})}catch(e){t(e)}})}dispose(){this.stopRecording()}}},224:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LineageService=void 0,t.LineageService=class{constructor(e,t){this.baseURL=e.replace(/\/$/,""),this.authToken=t}getAuthHeaders(){const e={"Content-Type":"application/json"};return this.authToken&&(e.Authorization=`Bearer ${this.authToken}`),e}async getLineageData(e,t,i){const{upstreamDepth:o=1,downstreamDepth:n=1,nodesPerLayer:r=50}=i||{};try{const i=new URLSearchParams({fqn:e,type:t,upstreamDepth:0===o?"0":(o-1).toString(),downstreamDepth:n.toString(),includeDeleted:"false",size:r.toString()}),s=await fetch(`${this.baseURL}/api/v1/lineage/getLineage?${i}`,{method:"GET",headers:this.getAuthHeaders()});if(!s.ok)throw new Error(`Failed to fetch lineage data: HTTP ${s.status}: ${s.statusText}`);return await s.json()}catch(e){throw console.error("Error fetching lineage data:",e),e}}async getDirectionalLineage(e,t="table",i=0,o=0){try{const n=await this.getLineageData(e,t,{upstreamDepth:i,downstreamDepth:o}),r=Object.values(n.nodes).map(e=>e.entity),s=r.find(t=>t.fullyQualifiedName===e);if(!s)throw new Error(`Center node not found for FQN: ${e}`);const a=[];return i>0&&n.upstreamEdges&&a.push(...n.upstreamEdges),o>0&&n.downstreamEdges&&a.push(...n.downstreamEdges),{nodes:r,edges:a,centerNode:s}}catch(e){throw console.error("Error getting directional lineage:",e),e}}async getSimpleLineage(e,t="table",i=2){try{const o=await this.getLineageData(e,t,{upstreamDepth:i,downstreamDepth:i}),n=Object.values(o.nodes).map(e=>e.entity),r=n.find(t=>t.fullyQualifiedName===e);if(!r)throw new Error(`Center node not found for FQN: ${e}`);return{nodes:n,edges:[...Object.values(o.upstreamEdges),...Object.values(o.downstreamEdges)],centerNode:r}}catch(e){throw console.error("Error getting simple lineage:",e),e}}async hasLineage(e,t="table"){try{const i=await this.getLineageData(e,t,{upstreamDepth:1,downstreamDepth:1}),o=Object.keys(i.upstreamEdges).length>0,n=Object.keys(i.downstreamEdges).length>0;return o||n}catch(e){return console.error("Error checking lineage availability:",e),!1}}}},317:e=>{e.exports=require("child_process")},398:e=>{e.exports=require("vscode")},434:e=>{e.exports=require("events")},485:function(e,t,i){var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,o,n)}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ModeManagerService=void 0;const s=r(i(398)),a=i(625);t.ModeManagerService=class{constructor(e){this.context=e,this.isInitialized=!1,this.finalTranscripts=[],this.interimTranscript="",this.isDictationActive=!1,console.log("ModeManagerService constructor"),this.whisperService=new a.WhisperService(e),e.subscriptions.push(s.commands.registerCommand("openmetadataExplorer.toggleDictation",async()=>{await this.toggleDictation()}))}async initialize(){if(console.log("ModeManagerService initializing..."),this.isInitialized)console.log("ModeManagerService already initialized");else{try{this.whisperService.setMessageHandler(e=>{this.sendMessage(e)}),await this.whisperService.initialize(),console.log("Whisper service initialized successfully")}catch(e){console.warn("Failed to initialize Whisper service:",e)}try{this.setupTranscriptListeners(),console.log("Transcript listeners set up successfully")}catch(e){console.error("Failed to set up transcript listeners:",e)}this.isInitialized=!0,console.log("ModeManagerService initialized successfully")}}setupTranscriptListeners(){console.log("Setting up transcript listeners"),this.whisperService.onTranscript((e,t)=>{if(console.log("Received transcript:",e,"isFinal:",t,"Dictation Active:",this.isDictationActive),this.isDictationActive){t?(this.finalTranscripts.push(e),this.interimTranscript=""):this.interimTranscript=e;const i=this.finalTranscripts.join(" ")+(this.interimTranscript?" "+this.interimTranscript:"");this.sendMessage({type:"updateTranscript",text:i,isAppending:!0})}})}async toggleDictation(){console.log(`toggleDictation called. Current state: isDictationActive=${this.isDictationActive}`),this.isDictationActive?await this.stopDictation():await this.startDictation()}async startDictation(){if(console.log("startDictation called"),this.isDictationActive)console.log("Dictation already active, ignoring start request");else try{this.isDictationActive=!0,this.finalTranscripts=[],this.interimTranscript="",console.log("Starting dictation in WhisperService..."),await this.whisperService.startDictation(),console.log("Dictation started successfully"),this.sendMessage({type:"updateStatus",text:"Recording..."})}catch(e){console.error("Failed to start dictation:",e),this.isDictationActive=!1,this.sendMessage({type:"updateStatus",text:"Error starting recording"})}}async stopDictation(){if(console.log("Stopping dictation"),this.isDictationActive){this.isDictationActive=!1;try{await this.whisperService.stopDictation()}catch(e){console.error("Failed to stop dictation:",e)}finally{this.sendMessage({type:"updateStatus",text:"Ready"})}}}setMessageHandler(e){this.messageHandler=e}sendMessage(e){this.messageHandler&&this.messageHandler(e)}async handleMessage(e){switch(console.log("ModeManagerService received message:",e),e.type){case"toggleDictation":await this.toggleDictation();break;case"loadWhisperModel":try{return await this.whisperService.loadModel(),{type:"modelLoadStarted"}}catch(e){return console.error("Failed to load Whisper model:",e),{type:"error",message:e instanceof Error?e.message:"Failed to load model"}}case"getApiKeyStatus":return{type:"apiKeyStatus",hasDeepgramKey:this.whisperService.isModelReady()};case"getModelStatus":return{type:"modelStatus",isModelLoaded:this.whisperService.isModelReady(),loadingProgress:this.whisperService.getLoadingProgress()};case"saveApiKey":"deepgram"===e.service&&(await this.context.secrets.store("openmetadataExplorer.deepgramApiKey",e.key),s.window.showInformationMessage("Deepgram API key saved"));break;case"clearApiKey":"deepgram"===e.service&&(await this.context.secrets.delete("openmetadataExplorer.deepgramApiKey"),s.window.showInformationMessage("Deepgram API key cleared"));break;case"getMicrophoneDevices":return{type:"microphoneDevices",devices:["default","Built-in Microphone"],configuredDevice:"default"};case"testMicrophone":try{const{MicrophoneWrapper:e}=await Promise.resolve().then(()=>r(i(160))),t=new e;return await t.testMicrophone(),{type:"microphoneTestResult",success:!0,message:"Microphone test successful! Audio is being captured correctly."}}catch(e){return{type:"microphoneTestResult",success:!1,message:"Microphone test failed: "+e.message}}case"copyToClipboard":try{await s.env.clipboard.writeText(e.text),this.sendMessage({type:"showSuccess"})}catch(e){console.error("Failed to copy to clipboard:",e)}break;case"workerMessage":this.whisperService.handleWorkerMessage(e.data)}}dispose(){this.isDictationActive&&this.whisperService.dispose()}}},618:function(e,t,i){var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,o,n)}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.OpenMetadataService=void 0;const s=r(i(398));t.OpenMetadataService=class{constructor(){const e=s.workspace.getConfiguration("openmetadataExplorer");this.baseUrl=e.get("openmetadataUrl")||"http://localhost:8585",this.authToken=e.get("openmetadataAuthToken")}extractSearchTerms(e){const t=["what","where","when","how","why","which","who","do","does","did","can","could","would","should","i","have","get","find","show","me","my","the","a","an","is","are","was","were","about","for","with","in","on","information","data","table","tables"],i=["customer","customers","user","users","client","clients","order","orders","purchase","purchases","transaction","transactions","product","products","item","items","inventory","sale","sales","revenue","payment","payments","address","addresses","location","locations","profile","profiles","account","accounts","metric","metrics","analytics","report","reports"],o=e.toLowerCase().replace(/[^\w\s]/g," ").split(/\s+/).filter(e=>e.length>2),n=o.filter(e=>i.includes(e)||!t.includes(e));return n.length>0?n:o.filter(e=>!t.includes(e))}isNaturalLanguageQuery(e){const t=e.toLowerCase();return["what","where","when","how","why","which","who"].some(e=>t.startsWith(e))||["?","do i have","can i find","show me","tell me"].some(e=>t.includes(e))||e.includes("?")}async searchWithNaturalLanguage(e){try{console.log(`Searching OpenMetadata for: ${e}`);let t=await this.search(e);if(0===t.length&&this.isNaturalLanguageQuery(e)){const t=this.extractSearchTerms(e);if(console.log(`No results for original query. Trying extracted terms: ${t.join(", ")}`),t.length>0){const e=[],i=[];for(const o of t)try{const t=await this.search(o);t.length>0&&(i.push(o),t.forEach(t=>{e.find(e=>e.id===t.id)||e.push(t)}))}catch(e){console.warn(`Failed to search for term: ${o}`,e)}return console.log(`Found ${e.length} results using extracted terms: ${i.join(", ")}`),{results:e.slice(0,20),searchTermsUsed:i,wasNaturalLanguage:!0}}}return{results:t,searchTermsUsed:[e],wasNaturalLanguage:!1}}catch(e){throw console.error("Error searching OpenMetadata:",e),e}}getAuthHeaders(){const e={"Content-Type":"application/json"};return this.authToken&&(e.Authorization=`Bearer ${this.authToken}`),e}async search(e){try{console.log(`Searching OpenMetadata for: ${e}`);const t=`${this.baseUrl}/api/v1/search/query?q=${encodeURIComponent(e)}&index=table_search_index&size=20`,i=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!i.ok)return console.log("Search API failed, trying to get all tables..."),await this.getAllTablesFiltered(e);const o=await i.json();console.log("OpenMetadata search response:",o);const n=[];if(o.hits?.hits)for(const e of o.hits.hits){const t=e._source;n.push({id:t.id||e._id,name:t.name||t.displayName||"Unknown",fullyQualifiedName:t.fullyQualifiedName||t.name,description:t.description,tableType:t.tableType,columns:t.columns,rowCount:t.rowCount,database:t.database?.name,schema:t.databaseSchema?.name,updatedAt:t.updatedAt,tags:t.tags?.map(e=>e.tagFQN||e.name)||[]})}return console.log(`Found ${n.length} results`),n}catch(t){console.error("Error searching OpenMetadata:",t);try{return await this.getAllTablesFiltered(e)}catch(e){throw console.error("Fallback also failed:",e),new Error(`Failed to search OpenMetadata: ${t instanceof Error?t.message:"Unknown error"}`)}}}async getAllTablesFiltered(e){try{console.log("Fetching all tables as fallback...");const t=`${this.baseUrl}/api/v1/tables?limit=50`,i=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!i.ok)throw new Error(`HTTP ${i.status}: ${i.statusText}`);const o=await i.json();console.log("All tables response:",o);let n=o.data||[];if(e&&e.trim()){const t=e.toLowerCase();n=n.filter(e=>e.name?.toLowerCase().includes(t)||e.description?.toLowerCase().includes(t)||e.fullyQualifiedName?.toLowerCase().includes(t))}const r=n.map(e=>({id:e.id,name:e.name,fullyQualifiedName:e.fullyQualifiedName,description:e.description,tableType:e.tableType,columns:e.columns,rowCount:e.rowCount,database:e.database?.name,schema:e.databaseSchema?.name,updatedAt:e.updatedAt,tags:e.tags?.map(e=>e.tagFQN||e.name)||[]}));return console.log(`Filtered to ${r.length} tables`),r}catch(e){throw console.error("Error fetching all tables:",e),e}}async getTableDetails(e){try{const t=`${this.baseUrl}/api/v1/tables/${e}`,i=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!i.ok)throw new Error(`HTTP ${i.status}: ${i.statusText}`);const o=await i.json();return{id:o.id,name:o.name,fullyQualifiedName:o.fullyQualifiedName,description:o.description,tableType:o.tableType,columns:o.columns,rowCount:o.rowCount,database:o.database?.name,schema:o.databaseSchema?.name,updatedAt:o.updatedAt,tags:o.tags?.map(e=>e.tagFQN||e.name)||[]}}catch(t){return console.error(`Error fetching table ${e}:`,t),null}}async testConnection(){try{return(await fetch(`${this.baseUrl}/api/v1/system/version`,{method:"GET",headers:this.getAuthHeaders()})).ok}catch(e){return console.error("Connection test failed:",e),!1}}}},625:function(e,t,i){var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,o,n)}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.WhisperService=void 0;const s=r(i(398)),a=i(788);t.WhisperService=class{constructor(e){this.context=e,this.worker=null,this.isInitialized=!1,this.isModelLoaded=!1,this.dictationService=null,this.loadingProgress=[],console.log("WhisperService constructor")}setMessageHandler(e){this.messageHandler=e}sendMessage(e){this.messageHandler&&this.messageHandler(e)}async initialize(){if(console.log("WhisperService initializing..."),this.isInitialized)console.log("WhisperService already initialized");else try{this.dictationService=new a.DictationService(null,this.context),this.isInitialized=!0,console.log("WhisperService initialized successfully (worker will be created in webview)")}catch(e){throw console.error("Failed to initialize WhisperService:",e),this.isInitialized=!1,e}}setupWorkerHandlers(){this.worker&&(this.worker.onmessage=e=>{const{status:t,data:i,error:o}=e.data;switch(t){case"loading":console.log("Model loading:",i);break;case"initiate":this.loadingProgress.push(e.data),this.notifyProgress();break;case"progress":this.loadingProgress=this.loadingProgress.map(t=>t.file===e.data.file?{...t,...e.data}:t),this.notifyProgress();break;case"done":this.loadingProgress=this.loadingProgress.filter(t=>t.file!==e.data.file),this.notifyProgress();break;case"ready":console.log("Whisper model ready!"),this.isModelLoaded=!0,this.loadingProgress=[],this.notifyModelReady();break;case"error":console.error("Whisper worker error:",o),this.notifyError(o||"Unknown error occurred");break;default:this.dictationService&&this.dictationService.handleWorkerMessage(e.data)}},this.worker.onerror=e=>{console.error("Whisper worker error:",e),this.notifyError("Worker error occurred")})}notifyProgress(){this.sendMessage({type:"modelLoadProgress",progress:this.loadingProgress})}notifyModelReady(){this.sendMessage({type:"modelReady",isModelLoaded:!0})}notifyError(e){s.window.showErrorMessage(`Whisper Service Error: ${e}`)}async loadModel(){if(!this.isInitialized)throw new Error("WhisperService not initialized");this.isModelLoaded?console.log("Model already loaded"):(console.log("Requesting model load from webview..."),this.sendMessage({type:"loadModelInWebview"}))}isModelReady(){return this.isModelLoaded}getLoadingProgress(){return[...this.loadingProgress]}async startAgent(){s.window.showInformationMessage("Agent mode coming soon!")}async startDictation(){if(!this.dictationService)throw new Error("Dictation service not initialized");if(!this.isModelLoaded)throw new Error("Whisper model not loaded. Please load the model first.");return this.dictationService.startDictation()}async stopDictation(){if(!this.dictationService)throw new Error("Dictation service not initialized");return this.dictationService.stopDictation()}async testMicrophone(){return this.dictationService?this.dictationService.testMicrophone():{success:!1,message:"Dictation service not initialized"}}onTranscript(e){return this.dictationService?this.dictationService.onTranscript(e):(console.warn("Cannot set up transcript listener: Dictation service not initialized"),()=>{})}isDictationActive(){return this.dictationService?.isDictationActive()||!1}handleWorkerMessage(e){const{status:t,error:i}=e;switch(t){case"loading":console.log("Model loading:",e.data);break;case"initiate":this.loadingProgress.push(e),this.notifyProgress();break;case"progress":this.loadingProgress=this.loadingProgress.map(t=>t.file===e.file?{...t,...e}:t),this.notifyProgress();break;case"done":this.loadingProgress=this.loadingProgress.filter(t=>t.file!==e.file),this.notifyProgress();break;case"ready":console.log("Whisper model ready!"),this.isModelLoaded=!0,this.loadingProgress=[],this.notifyModelReady();break;case"error":console.error("Whisper worker error:",i),this.notifyError(i||"Unknown error occurred");break;default:!this.dictationService||"start"!==t&&"update"!==t&&"complete"!==t||this.dictationService.handleWorkerMessage(e)}}setWorker(e){this.worker=e,this.dictationService&&(this.dictationService.whisperWorker=e)}async dispose(){console.log("WhisperService disposing...");try{this.dictationService&&await this.dictationService.stopDictation()}catch(e){console.error("Error stopping dictation during dispose:",e)}this.worker&&(this.worker.terminate(),this.worker=null),this.isInitialized=!1,this.isModelLoaded=!1,this.loadingProgress=[],console.log("WhisperService disposed")}}},788:function(e,t,i){var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,o,n)}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.DictationService=void 0;const s=i(434),a=r(i(398)),c=i(160);t.DictationService=class{constructor(e,t){this.whisperWorker=e,this.context=t,this.eventEmitter=new s.EventEmitter,this.audioChunks=[],this.language="en",this.state={isActive:!1,mic:null,worker:this.whisperWorker,statusBarItem:a.window.createStatusBarItem(a.StatusBarAlignment.Right)},this.state.statusBarItem.text="$(unmute) Dictation: Off",this.state.statusBarItem.show()}async startDictation(){if(console.log("DictationService.startDictation called"),this.state.isActive&&(console.log("Dictation already active, stopping first..."),await this.stopDictation(),console.log("Previous dictation stopped")),!this.whisperWorker)throw new Error("Whisper worker not initialized.");try{console.log("Creating microphone wrapper...");const e=new c.MicrophoneWrapper;console.log("Microphone wrapper instance created");const t=e.startRecording();console.log("Microphone recording started"),this.state.mic=e,this.state.isActive=!0,this.state.statusBarItem.text="$(megaphone) Dictation: On",console.log("References stored"),this.audioChunks=[],t.on("error",e=>{console.error("Microphone stream error:",e),console.error("Microphone state:",{isActive:this.state.isActive,hasStream:!!t,error:e}),e.message?.includes("command")&&e.message?.includes("not")&&a.window.showErrorMessage(e.message)}),t.on("data",e=>{const t=this.convertBufferToFloat32Array(e);this.audioChunks.push(t);const i=this.audioChunks.reduce((e,t)=>e+t.length,0);i>=32e3&&this.processAudioChunks()}),console.log("All handlers set up successfully")}catch(e){throw console.error("Error in startDictation:",e),e instanceof Error&&a.window.showErrorMessage(`Failed to start dictation: ${e.message}`),e}}convertBufferToFloat32Array(e){const t=new Int16Array(e.buffer,e.byteOffset,e.byteLength/2),i=new Float32Array(t.length);for(let e=0;e<t.length;e++)i[e]=t[e]/32768;return i}processAudioChunks(){if(0===this.audioChunks.length||!this.whisperWorker)return;const e=this.audioChunks.reduce((e,t)=>e+t.length,0),t=new Float32Array(e);let i=0;for(const e of this.audioChunks)t.set(e,i),i+=e.length;const o=t.length>48e4?t.slice(-48e4):t;console.log("Processing audio chunk:",o.length,"samples"),this.whisperWorker.postMessage({type:"generate",data:{audio:o,language:this.language}}),this.audioChunks=[]}handleWorkerMessage(e){const{status:t,output:i,error:o}=e;switch(t){case"start":console.log("Whisper processing started");break;case"update":console.log("Whisper processing update:",i);break;case"complete":console.log("Whisper transcription complete:",i),i&&i.trim()&&this.eventEmitter.emit("transcript",i.trim(),!0);break;case"error":console.error("Whisper processing error:",o)}}setLanguage(e){this.language=e,console.log("Language set to:",e)}async stopDictation(){console.log("stopDictation called"),this.state.mic&&(this.state.mic.stopRecording(),this.state.mic=null),this.audioChunks.length>0&&this.processAudioChunks(),this.state.isActive=!1,this.state.statusBarItem.text="$(unmute) Dictation: Off",this.audioChunks=[]}onTranscript(e){return this.whisperWorker?(this.eventEmitter.on("transcript",e),()=>{this.eventEmitter.removeListener("transcript",e)}):(console.warn("Cannot set up transcript listener: Whisper worker not initialized"),()=>{})}async testMicrophone(){try{const e=new c.MicrophoneWrapper,t=e.startRecording();return new Promise(i=>{let o=!1;const n=setTimeout(()=>{e.stopRecording(),o||i({success:!1,message:"No audio data received from microphone"})},3e3);t.on("data",()=>{o=!0,clearTimeout(n),e.stopRecording(),i({success:!0,message:"Microphone is working correctly"})}),t.on("error",t=>{clearTimeout(n),e.stopRecording(),i({success:!1,message:t.message||"Microphone error"})})})}catch(e){return{success:!1,message:e instanceof Error?e.message:"Unknown microphone error"}}}isDictationActive(){return this.state.isActive}}},826:function(e,t,i){var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,o,n)}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.OpenMetadataExplorerProvider=void 0;const s=r(i(398)),a=i(104),c=i(224),l=i(485),d=i(618);class h{constructor(e,t){this._extensionUri=e,this.context=t,console.log("🔧 OpenMetadataExplorerProvider: Starting constructor...");try{console.log("🗄️ Initializing OpenMetadata service..."),this.openMetadataService=new d.OpenMetadataService,console.log("🤖 Initializing Gemini service..."),this.initializeGeminiService(),console.log("📊 Initializing Lineage service..."),this.initializeLineageService(),console.log("🎤 Initializing ModeManager service..."),this.initializeModeManagerService().catch(e=>{console.error("❌ Failed to initialize ModeManagerService:",e)}),console.log("✅ OpenMetadataExplorerProvider constructor completed")}catch(e){throw console.error("❌ Error in OpenMetadataExplorerProvider constructor:",e),e}}initializeGeminiService(){const e=s.workspace.getConfiguration("openmetadataExplorer").get("geminiApiKey");e&&(this.geminiService=new a.GeminiService(e))}initializeLineageService(){const e=s.workspace.getConfiguration("openmetadataExplorer"),t=e.get("openmetadataUrl")||"http://localhost:8585",i=e.get("openmetadataAuthToken")||"";this.lineageService=new c.LineageService(t,i)}async initializeModeManagerService(){this.modeManagerService=new l.ModeManagerService(this.context),await this.modeManagerService.initialize(),this.modeManagerService.setMessageHandler(e=>{this._view?.webview.postMessage(e)})}resolveWebviewView(e,t,i){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage(async e=>{switch(e.type){case"search":await this.handleSearch(e.query);break;case"getConfig":await this.sendConfig();break;case"getLineage":await this.handleGetLineage(e.tableFqn,e.entityType);break;case"expandLineage":await this.handleExpandLineage(e.tableFqn,e.nodeId,e.direction,e.entityType);break;case"openVibeCoder":await this.handleOpenVibeCoder();break;default:if(this.modeManagerService)try{const t=await this.modeManagerService.handleMessage(e);t&&this._view?.webview.postMessage(t)}catch(e){console.error("Error handling message in ModeManagerService:",e)}else console.warn("ModeManagerService not initialized yet, ignoring message:",e.type);break;case"collapseLineage":await this.handleCollapseLineage(e.tableFqn,e.nodeId,e.direction);break;case"error":s.window.showErrorMessage(e.message);break;case"info":s.window.showInformationMessage(e.message)}})}async handleSearch(e){if(this._view)try{this._view.webview.postMessage({type:"searchStarted",query:e});const t=await this.openMetadataService.searchWithNaturalLanguage(e);if(this._view.webview.postMessage({type:"searchResults",query:e,results:t.results,aiInsights:"",searchContext:{originalQuery:e,searchTermsUsed:t.searchTermsUsed,wasNaturalLanguage:t.wasNaturalLanguage}}),this.geminiService&&t.results.length>0)try{const i=await this.geminiService.searchInsights(e,t.results,t.searchTermsUsed,t.wasNaturalLanguage);this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:i})}catch(e){console.error("AI insights error:",e),this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:t.wasNaturalLanguage?`I found ${t.results.length} tables related to ${t.searchTermsUsed.join(" and ")}. AI analysis is currently unavailable.`:`Found ${t.results.length} tables. AI analysis is currently unavailable.`})}else this.geminiService||this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:t.wasNaturalLanguage?`I found ${t.results.length} tables related to ${t.searchTermsUsed.join(" and ")}. Configure Gemini API key in settings for AI analysis.`:`Found ${t.results.length} tables. Configure Gemini API key in settings for AI analysis.`})}catch(e){console.error("Search error:",e),this._view.webview.postMessage({type:"searchError",error:e instanceof Error?e.message:"Unknown error occurred"})}}async handleOpenVibeCoder(){this._view&&this._view.webview.postMessage({type:"openVibeCoderModal"})}async handleGetLineage(e,t="table"){if(this._view)try{const i=await this.lineageService.getSimpleLineage(e,t,2);this._view.webview.postMessage({type:"lineageData",tableFqn:e,lineageData:i})}catch(t){console.error("Lineage error:",t),this._view.webview.postMessage({type:"lineageError",tableFqn:e,error:t instanceof Error?t.message:"Failed to load lineage data"})}}async handleExpandLineage(e,t,i,o="table"){if(this._view)try{let n;console.log(`Expanding lineage for node ${t} in direction ${i}`),n="upstream"===i?await this.lineageService.getDirectionalLineage(t,o,2,0):"downstream"===i?await this.lineageService.getDirectionalLineage(t,o,0,2):await this.lineageService.getSimpleLineage(t,o,2),this._view.webview.postMessage({type:"expandedLineageData",tableFqn:e,nodeId:t,direction:i,expandedData:n})}catch(o){console.error("Expand lineage error:",o),this._view.webview.postMessage({type:"expandedLineageData",tableFqn:e,nodeId:t,direction:i,expandedData:{nodes:[],edges:[],centerNode:null}})}}async handleCollapseLineage(e,t,i){this._view&&(console.log(`Collapsing lineage for node ${t} in direction ${i}`),this._view.webview.postMessage({type:"collapsedLineage",tableFqn:e,nodeId:t,direction:i}))}async sendConfig(){if(!this._view)return;const e=s.workspace.getConfiguration("openmetadataExplorer");this._view.webview.postMessage({type:"config",config:{openmetadataUrl:e.get("openmetadataUrl"),hasGeminiKey:!!e.get("geminiApiKey"),hasAuthToken:!!e.get("openmetadataAuthToken")}})}refresh(){this._view&&(this._view.webview.html=this._getHtmlForWebview(this._view.webview))}_getHtmlForWebview(e){const t=e.asWebviewUri(s.Uri.joinPath(this._extensionUri,"dist","webview.js")),i=e.asWebviewUri(s.Uri.joinPath(this._extensionUri,"assets","extension-logo.svg")),o=e.asWebviewUri(s.Uri.joinPath(this._extensionUri,"dist","whisperWorker.js"));console.log("🔗 Webview script URI:",t.toString()),console.log("🖼️ Logo URI:",i.toString());const n=function(){let e="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let i=0;i<32;i++)e+=t.charAt(Math.floor(62*Math.random()));return e}();return`<!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; img-src ${e.cspSource} https:; script-src 'nonce-${n}'; worker-src ${e.cspSource} blob:; connect-src https: ${e.cspSource};">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <title>OpenMetadata AI Explorer</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    font-size: var(--vscode-font-size);\n                    font-weight: var(--vscode-font-weight);\n                    color: var(--vscode-foreground);\n                    background-color: var(--vscode-editor-background);\n                    margin: 0;\n                    padding: 10px;\n                }\n                .loading {\n                    text-align: center;\n                    padding: 20px;\n                }\n            </style>\n        </head>\n        <body>\n            <div class="loading">\n                <h2>🔍 OpenMetadata AI Explorer</h2>\n                <p>Loading...</p>\n            </div>\n            <div id="root"></div>\n            <script nonce="${n}">\n                console.log('🚀 Webview script starting...');\n                console.log('📍 Script URI: ${t}');\n                console.log('🖼️ Logo URI: ${i}');\n                \n                // Make URIs available globally\n                window.extensionLogoUri = '${i}';\n                window.whisperWorkerUri = '${o}';\n                \n                // Show loading message\n                setTimeout(() => {\n                    const loading = document.querySelector('.loading');\n                    if (loading && !document.querySelector('.app')) {\n                        console.error('❌ React app failed to load within 5 seconds');\n                        loading.innerHTML = '<h2>⚠️ Loading Failed</h2><p>React app failed to load. Check the developer console for errors.</p>';\n                    }\n                }, 5000);\n                \n                // Check if the main script loads\n                const script = document.querySelector('script[src="${t}"]');\n                if (script) {\n                    script.addEventListener('load', () => {\n                        console.log('✅ Main script loaded successfully');\n                    });\n                    script.addEventListener('error', (e) => {\n                        console.error('❌ Failed to load main script:', e);\n                    });\n                }\n            <\/script>\n            <script nonce="${n}" src="${t}"><\/script>\n        </body>\n        </html>`}}t.OpenMetadataExplorerProvider=h,h.viewType="openmetadataExplorer"},857:e=>{e.exports=require("os")},896:e=>{e.exports=require("fs")}},t={},i=function i(o){var n=t[o];if(void 0!==n)return n.exports;var r=t[o]={exports:{}};return e[o].call(r.exports,r,r.exports,i),r.exports}(144);module.exports=i})();
//# sourceMappingURL=extension.js.map