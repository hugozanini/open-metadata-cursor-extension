(()=>{"use strict";var e={23:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GeminiService=void 0,t.GeminiService=class{constructor(e){this.baseUrl="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent",this.apiKey=e}async analyzeTable(e){const t=`\nYou are a data engineering expert analyzing database tables. Provide a concise analysis of this table:\n\nTABLE INFORMATION:\n- Name: ${e.name}\n- Full Name: ${e.fullyQualifiedName}\n- Type: ${e.tableType||"Unknown"}\n- Database: ${e.database||"Unknown"}\n- Schema: ${e.schema||"Unknown"}\n- Description: ${e.description||"No description provided"}\n- Row Count: ${e.rowCount||"Unknown"}\n- Last Updated: ${e.updatedAt||"Unknown"}\n- Tags: ${e.tags?.join(", ")||"None"}\n\nCOLUMNS:\n${e.columns?e.columns.slice(0,10).map(e=>`- ${e.name} (${e.dataType||"unknown type"}): ${e.description||"no description"}`).join("\n"):"Column information not available"}\n\nPlease provide:\n📊 **Data Summary**: Brief overview (1-2 sentences)\n⚠️  **Potential Issues**: Any concerns about data quality, naming, or structure\n💡 **Recommendations**: Suggestions for improvement\n🔗 **Relationships**: Likely connections to other tables based on column names\n\nKeep your response concise and practical for data engineers.\n        `;try{const e=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:t}]}],generationConfig:{temperature:.7,topK:40,topP:.95,maxOutputTokens:1024}})});if(!e.ok){const t=await e.text();return console.error("Gemini API error:",e.status,t),`❌ AI analysis failed (${e.status}). Check your API key in settings.`}const n=await e.json();return n.candidates&&n.candidates[0]?.content?.parts?.[0]?.text?n.candidates[0].content.parts[0].text:(console.error("Unexpected Gemini response format:",n),"❌ AI analysis returned unexpected format")}catch(e){return console.error("Error calling Gemini API:",e),`❌ AI analysis failed: ${e instanceof Error?e.message:"Network error"}`}}async searchInsights(e,t){const n=`\nAnalyze search results for "${e}" - ${t.length} tables found.\n\nKEY TABLES:\n${t.slice(0,5).map((e,t)=>`• ${e.name} - ${e.description||"No description"} (${e.rowCount||"?"} rows)`).join("\n")}\n\nProvide 2-3 sentence summary:\n1. Most relevant tables for this search\n2. Suggest 2 related search terms\n\nBe concise and practical.\n        `;try{const a=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:n}]}],generationConfig:{temperature:.7,topK:40,topP:.95,maxOutputTokens:200}})});if(!a.ok)return console.error("Gemini API error for insights:",a.status),`Found ${t.length} tables matching "${e}". Configure Gemini API key for AI insights.`;const i=await a.json();return i.candidates&&i.candidates[0]?.content?.parts?.[0]?.text?i.candidates[0].content.parts[0].text:`Found ${t.length} tables matching "${e}". AI insights unavailable.`}catch(n){return console.error("Error getting search insights:",n),`Found ${t.length} tables matching "${e}". Check your internet connection for AI insights.`}}async validateApiKey(){try{return(await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","x-goog-api-key":this.apiKey},body:JSON.stringify({contents:[{parts:[{text:"Hello"}]}]})})).ok}catch(e){return console.error("Error validating Gemini API key:",e),!1}}}},73:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,i)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.OpenMetadataExplorerProvider=void 0;const o=r(n(398)),s=n(23),c=n(289);class l{constructor(e){this._extensionUri=e,this.openMetadataService=new c.OpenMetadataService,this.initializeGeminiService()}initializeGeminiService(){const e=o.workspace.getConfiguration("openmetadataExplorer").get("geminiApiKey");e&&(this.geminiService=new s.GeminiService(e))}resolveWebviewView(e,t,n){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage(async e=>{switch(e.type){case"search":await this.handleSearch(e.query);break;case"getConfig":await this.sendConfig();break;case"error":o.window.showErrorMessage(e.message);break;case"info":o.window.showInformationMessage(e.message)}})}async handleSearch(e){if(this._view)try{this._view.webview.postMessage({type:"searchStarted",query:e});const t=await this.openMetadataService.search(e);if(this._view.webview.postMessage({type:"searchResults",query:e,results:t,aiInsights:""}),this.geminiService&&t.length>0)try{const n=await this.geminiService.searchInsights(e,t);this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:n})}catch(e){console.error("AI insights error:",e),this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:`⚡ Found ${t.length} results. AI analysis unavailable.`})}else this.geminiService||this._view.webview.postMessage({type:"aiInsightsUpdate",aiInsights:`⚡ Found ${t.length} results. Configure Gemini API key for AI insights.`})}catch(e){console.error("Search error:",e),this._view.webview.postMessage({type:"searchError",error:e instanceof Error?e.message:"Unknown error occurred"})}}async sendConfig(){if(!this._view)return;const e=o.workspace.getConfiguration("openmetadataExplorer");this._view.webview.postMessage({type:"config",config:{openmetadataUrl:e.get("openmetadataUrl"),hasGeminiKey:!!e.get("geminiApiKey")}})}refresh(){this._view&&(this._view.webview.html=this._getHtmlForWebview(this._view.webview))}_getHtmlForWebview(e){const t=e.asWebviewUri(o.Uri.joinPath(this._extensionUri,"dist","webview.js")),n=function(){let e="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let n=0;n<32;n++)e+=t.charAt(Math.floor(62*Math.random()));return e}();return`<!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; img-src ${e.cspSource} https:; script-src 'nonce-${n}';">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <title>OpenMetadata AI Explorer</title>\n            <style>\n                body {\n                    font-family: var(--vscode-font-family);\n                    font-size: var(--vscode-font-size);\n                    font-weight: var(--vscode-font-weight);\n                    color: var(--vscode-foreground);\n                    background-color: var(--vscode-editor-background);\n                    margin: 0;\n                    padding: 0;\n                }\n            </style>\n        </head>\n        <body>\n            <div id="root"></div>\n            <script nonce="${n}" src="${t}"><\/script>\n        </body>\n        </html>`}}t.OpenMetadataExplorerProvider=l,l.viewType="openmetadataExplorer"},265:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,i)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.deactivate=t.activate=void 0;const o=r(n(398)),s=n(73);t.activate=function(e){console.log("OpenMetadata AI Explorer is now active!");const t=new s.OpenMetadataExplorerProvider(e.extensionUri);e.subscriptions.push(o.window.registerWebviewViewProvider("openmetadataExplorer",t)),e.subscriptions.push(o.commands.registerCommand("openmetadataExplorer.refresh",()=>{t.refresh()})),o.window.showInformationMessage("OpenMetadata AI Explorer is ready! 🚀")},t.deactivate=function(){console.log("OpenMetadata AI Explorer deactivated")}},289:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,i)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.OpenMetadataService=void 0;const o=r(n(398));t.OpenMetadataService=class{constructor(){const e=o.workspace.getConfiguration("openmetadataExplorer");this.baseUrl=e.get("openmetadataUrl")||"http://localhost:8585",this.authToken=e.get("openmetadataAuthToken")}getAuthHeaders(){const e={"Content-Type":"application/json"};return this.authToken&&(e.Authorization=`Bearer ${this.authToken}`),e}async search(e){try{console.log(`Searching OpenMetadata for: ${e}`);const t=`${this.baseUrl}/api/v1/search/query?q=${encodeURIComponent(e)}&index=table_search_index&size=20`,n=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!n.ok)return console.log("Search API failed, trying to get all tables..."),await this.getAllTablesFiltered(e);const a=await n.json();console.log("OpenMetadata search response:",a);const i=[];if(a.hits?.hits)for(const e of a.hits.hits){const t=e._source;i.push({id:t.id||e._id,name:t.name||t.displayName||"Unknown",fullyQualifiedName:t.fullyQualifiedName||t.name,description:t.description,tableType:t.tableType,columns:t.columns,rowCount:t.rowCount,database:t.database?.name,schema:t.databaseSchema?.name,updatedAt:t.updatedAt,tags:t.tags?.map(e=>e.tagFQN||e.name)||[]})}return console.log(`Found ${i.length} results`),i}catch(t){console.error("Error searching OpenMetadata:",t);try{return await this.getAllTablesFiltered(e)}catch(e){throw console.error("Fallback also failed:",e),new Error(`Failed to search OpenMetadata: ${t instanceof Error?t.message:"Unknown error"}`)}}}async getAllTablesFiltered(e){try{console.log("Fetching all tables as fallback...");const t=`${this.baseUrl}/api/v1/tables?limit=50`,n=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const a=await n.json();console.log("All tables response:",a);let i=a.data||[];if(e&&e.trim()){const t=e.toLowerCase();i=i.filter(e=>e.name?.toLowerCase().includes(t)||e.description?.toLowerCase().includes(t)||e.fullyQualifiedName?.toLowerCase().includes(t))}const r=i.map(e=>({id:e.id,name:e.name,fullyQualifiedName:e.fullyQualifiedName,description:e.description,tableType:e.tableType,columns:e.columns,rowCount:e.rowCount,database:e.database?.name,schema:e.databaseSchema?.name,updatedAt:e.updatedAt,tags:e.tags?.map(e=>e.tagFQN||e.name)||[]}));return console.log(`Filtered to ${r.length} tables`),r}catch(e){throw console.error("Error fetching all tables:",e),e}}async getTableDetails(e){try{const t=`${this.baseUrl}/api/v1/tables/${e}`,n=await fetch(t,{method:"GET",headers:this.getAuthHeaders()});if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const a=await n.json();return{id:a.id,name:a.name,fullyQualifiedName:a.fullyQualifiedName,description:a.description,tableType:a.tableType,columns:a.columns,rowCount:a.rowCount,database:a.database?.name,schema:a.databaseSchema?.name,updatedAt:a.updatedAt,tags:a.tags?.map(e=>e.tagFQN||e.name)||[]}}catch(t){return console.error(`Error fetching table ${e}:`,t),null}}async testConnection(){try{return(await fetch(`${this.baseUrl}/api/v1/system/version`,{method:"GET",headers:this.getAuthHeaders()})).ok}catch(e){return console.error("Connection test failed:",e),!1}}}},398:e=>{e.exports=require("vscode")}},t={},n=function n(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={exports:{}};return e[a].call(r.exports,r,r.exports,n),r.exports}(265);module.exports=n})();
//# sourceMappingURL=extension.js.map